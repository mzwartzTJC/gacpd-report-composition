<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <xsl:output method="xml" indent="yes"/>
  
  <!--Global variables-->
  <xsl:variable name="list_label" select="'- '"/>
  <xsl:variable name="list_label2" select="'-- '"/>
  <xsl:variable name="new_line" select="'&#10;'"/>
  <xsl:variable name="list_break" select="'#'"/>
  
  <!-- Attribute Sets -->
  <xsl:attribute-set name="general-body">
    <xsl:attribute name="font-family">Inter-Regular</xsl:attribute>
    <xsl:attribute name="font-size">8pt</xsl:attribute>
  </xsl:attribute-set>
  
  
  <!-- NPG STYLESHEET GOES HERE -->
  
  <xsl:template match="/">
    <fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" xml:lang="en">
      
      <fo:layout-master-set>
        <fo:simple-page-master master-name="npg_report" page-height="11in" page-width="8.5in" margin="0.5in">
          <fo:region-body margin-bottom="0.6in" margin-top="1.15in"/>
          <fo:region-before extent="1.15in"/> 
          <fo:region-after extent="0.5in"/>
        </fo:simple-page-master>
      </fo:layout-master-set>
      
      <fo:declarations>
        <x:xmpmeta xmlns:x="adobe:ns:meta/">
          <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
              <dc:title><xsl:value-of select="REPORT/PROGRAM/PROGRAM_CD"/> NPG Report</dc:title>
              <dc:creator>The Joint Commission Department of Global Standards and Survery Methods</dc:creator>
            </rdf:Description>
          </rdf:RDF>
        </x:xmpmeta>
      </fo:declarations>

      
      <fo:page-sequence master-reference="npg_report" id="npg_report">
        <fo:title><xsl:value-of select="REPORT/PROGRAM/PROGRAM_NM"/> NPG Standards</fo:title>
        
        
          <!--Header infromation --> 
        <fo:static-content flow-name="xsl-region-before" role="artifact">
          <fo:block-container absolute-position="absolute" top="-0.5in" left="0in" width="100%" height="2.5in">
            <fo:block><fo:external-graphic 
              src="/app/stylesheets/images/JC_logo_CMYK_TM.jpg"
              content-width="1.75in"
              fox:alt-text="Joint Commission Logo"/>
            </fo:block>
          </fo:block-container>
          <fo:block-container text-align="left" font-family="Satoshi-Bold" font-size="18pt">
            <xsl:choose>
              <xsl:when test="REPORT/PROGRAM/CHAPTER/CHAPTER_LBL = 'NPG'">
                <fo:block start-indent="2.75in">National Performance Goals™</fo:block>
              </xsl:when>
              <xsl:when test="REPORT/PROGRAM/CHAPTER/CHAPTER_LBL = 'NPSG'">
                <fo:block start-indent="2.75in">National Patient Safety Goals®</fo:block>
              </xsl:when>
              <xsl:otherwise>
                <fo:block start-indent="2.75in"><xsl:value-of select="REPORT/PROGRAM/CHAPTER/CHAPTER_LBL"/></fo:block>
              </xsl:otherwise>
            </xsl:choose>
            <fo:block start-indent="2.75in">Effective <xsl:value-of select="concat(substring-before(REPORT/EFC_DT, ' '), ' ', substring-after(REPORT/EFC_DT, ', '))" /> for the </fo:block>
            <fo:block start-indent="2.75in"><xsl:value-of select="REPORT/PROGRAM/PROGRAM_NM"/> Program</fo:block>
          </fo:block-container>
          <fo:block><fo:leader leader-pattern="rule" rule-thickness="1.5pt" color="gray" leader-length="100%"/></fo:block>
        </fo:static-content>
        

        <!--Footer information -->
        <fo:static-content flow-name = "xsl-region-after" role="artifact">
          <fo:block><fo:leader leader-pattern="rule" rule-thickness="1pt" color="black" leader-length="100%"/></fo:block>
          <fo:table table-layout="fixed" width="100%">
            <fo:table-column column-width="30%"/>
            <fo:table-column column-width="40%"/>
            <fo:table-column column-width="30%"/>
            <fo:table-body>
              <fo:table-row>
                <fo:table-cell display-align="center"> 
                  <fo:block></fo:block>
                </fo:table-cell>
                <fo:table-cell display-align="center">
                  <fo:block font-size="8pt" text-align="center">Page <fo:page-number/> of <fo:page-number-citation-last ref-id="npg_report"/></fo:block>
                  <fo:block font-size="8pt" text-align="center">Report Generated by GACPD</fo:block>
                  <fo:block font-size="8pt" text-align="center"><xsl:value-of select="REPORT/RUN_DT"/></fo:block>
                </fo:table-cell>
                <fo:table-cell display-align="center">
                  <fo:block font-size="8pt" text-align="right">© <xsl:value-of select="substring-after(REPORT/RUN_DT, ', ')"/> Joint Commission</fo:block>
                </fo:table-cell>
              </fo:table-row>
            </fo:table-body>
          </fo:table>
        </fo:static-content>
        
        <fo:flow flow-name = "xsl-region-body" font-family="Inter-Regular" font-size="10pt" space-after="5pt">
  
          <xsl:for-each select="REPORT/PROGRAM/CHAPTER/GOAL">
            <fo:block-container page-break-before = "always" border-top="1pt solid black" background-color="#F4F6F8" padding-top = "10pt" padding-bottom="10pt" padding-left="2pt" padding-right="2pt" margin-top="5pt" margin-bottom="10pt">
              <fo:block keep-with-next.within-page="always" font-family="Satoshi-Bold" font-size="16pt" ><xsl:value-of select="GOAL_HDR"/></fo:block>
              <fo:block>
                <xsl:call-template name="tag_text">
                  <xsl:with-param name="txt" select="GOAL_TX"/>
                </xsl:call-template>
              </fo:block>
            </fo:block-container>
            <fo:block/>

            <xsl:for-each select="STANDARD">
              
              <xsl:if test="INTRO_HDR">
                <fo:block-container margin-bottom="10pt">
                  <fo:block font-family="Satoshi-Bold" font-size="13pt" keep-with-next.within-page="always"><xsl:value-of select="INTRO_HDR"/></fo:block>
                  <fo:block>
                    <xsl:call-template name="tag_text">
                      <xsl:with-param name="txt" select="INTRO_TX"/>
                    </xsl:call-template>
                  </fo:block>
                </fo:block-container>
              </xsl:if>
              
              
              <fo:block-container margin-bottom="10pt">
                <fo:block font-family="Satoshi-Bold" font-size="12pt" keep-with-next.within-page="always">
                  <xsl:value-of select="STANDARD_NM"/>
                </fo:block>
                <fo:block>
                  <xsl:call-template name="tag_text">
                    <xsl:with-param name="txt" select="STD_TX"/>
                 </xsl:call-template>
                </fo:block>
              </fo:block-container>
              
               
              <xsl:if test="STD_RATIONALE_TX">
                <fo:block-container margin-bottom="10pt"> 
                  <fo:block font-family="Satoshi-Bold" font-size="10pt" keep-with-next.within-page="always">-- Rationale for <xsl:value-of select="STANDARD_NM"/> --</fo:block>
                   <fo:block>
                    <xsl:call-template name="tag_text">
                      <xsl:with-param name="txt" select="STD_RATIONALE_TX"/>
                    </xsl:call-template>
                  </fo:block>
                </fo:block-container>
              </xsl:if>
              
                   
              <fo:table table-layout="fixed" width="100%">
                <fo:table-column column-width="10%"/>
                <fo:table-column column-width="90%"/>
                <fo:table-body>
                  <fo:table-row keep-with-next.within-page="always">
                    <fo:table-cell role="TH" number-columns-spanned="2" border-bottom="1pt solid gray" padding="5pt" text-align="center">
                      <fo:block font-family="Satoshi-Bold" font-size="13pt">Element(s) of Performance for <xsl:value-of select="STANDARD_NM"/></fo:block>
                    </fo:table-cell>
                  </fo:table-row>
                
                  <xsl:for-each select="EP">
                    <fo:table-row>
                      <fo:table-cell role="TD" padding = "2pt">
                        <fo:block><xsl:value-of select="EP_LBL"/></fo:block>
                      </fo:table-cell>
                      <fo:table-cell  padding = "2pt">
                        <xsl:call-template name="tag_text">
                          <xsl:with-param name="txt" select="EP_TX"/>
                        </xsl:call-template>
                        
                        <xsl:if test="DOC">
                          <fo:block keep-with-previous.within-page="always" margin="3pt">
                            <fo:inline baseline-shift="-1.5pt">
                              <fo:external-graphic src="/app/stylesheets/images/doc_icon.png" content-height="10pt" fox:alt-text="Documentation icon"/>
                            </fo:inline>  
                            <fo:inline>  Documentation is required.</fo:inline>
                          </fo:block>
                        </xsl:if>
                        
                        <xsl:if test="COP">
                          <fo:block margin="3pt" font-family="Inter-Italic" keep-with-previous="always">CoP(s): <xsl:value-of select="COP"/></fo:block>
                        </xsl:if>
                        
                      </fo:table-cell>
                    </fo:table-row>
                  </xsl:for-each>
                </fo:table-body>
              </fo:table>

              <fo:block keep-with-previous="always"><fo:leader leader-pattern="rule" rule-thickness="1pt" color="black" leader-length="100%"/></fo:block>
    
            </xsl:for-each>           
          </xsl:for-each>
        </fo:flow>
      </fo:page-sequence>
    </fo:root>
  </xsl:template>
  
  
  <!-- Template for list tagging -->
  <xsl:template name="tag_text">
    <xsl:param name="txt"/>
    <xsl:choose>
      <xsl:when test="contains($txt, $new_line)">
        <xsl:choose>
          <xsl:when test="starts-with(normalize-space($txt), $list_label)">
            <!--recurring loop to create a list of list elements -->
            <xsl:call-template name="create_list_list">
              <xsl:with-param name="txt" select="$txt"/>
              <xsl:with-param name="list_txt"/>
            </xsl:call-template>
            
          </xsl:when>
          <xsl:otherwise> <!-- if line isn't a list item -->
            <xsl:if test="string-length(substring-before($txt, $new_line)) > 0">
              <fo:block><xsl:value-of select="substring-before($txt, $new_line)"/></fo:block>
            </xsl:if>
            
            <xsl:variable name="txt" select="substring-after($txt, $new_line)"/>
            
            <xsl:call-template name="tag_text">
              <xsl:with-param name="txt" select="$txt"/>
            </xsl:call-template>
            
          </xsl:otherwise>
        </xsl:choose>              
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="starts-with(normalize-space($txt), $list_label)">
            <fo:list-block>
              <fo:list-item>
                <fo:list-item-label><fo:block start-indent="10pt">•</fo:block></fo:list-item-label>
                <fo:list-item-body><fo:block start-indent="20pt"><xsl:value-of select="substring-after($txt, $list_label)"/></fo:block></fo:list-item-body>
              </fo:list-item>
            </fo:list-block>                        
          </xsl:when>
          <xsl:otherwise>
            <fo:block><xsl:value-of select="$txt"/></fo:block>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
    
  </xsl:template>
  
  
  <xsl:template name="create_list_list">
    <xsl:param name="txt"/>
    <xsl:param name="list_txt"/>
    <xsl:choose>
      <xsl:when test="starts-with(normalize-space($txt), $list_label) or starts-with(normalize-space($txt), $list_label2)">
        <xsl:choose>
          <xsl:when test="contains($txt, $new_line)">
            <xsl:variable name="list_txt" select="concat($list_txt, substring-before($txt, $new_line), $list_break)"/>
            <xsl:variable name="txt" select="substring-after($txt, $new_line)"/>
            <xsl:call-template name="create_list_list">
              <xsl:with-param name="txt" select="$txt"/>
              <xsl:with-param name="list_txt" select="$list_txt"/>
            </xsl:call-template>
          </xsl:when>
          
          <xsl:otherwise>
            <xsl:variable name="list_txt" select="concat($list_txt, $txt, $list_break)"/>
            
            <fo:list-block>
              <!--call template to print list --> 
              <xsl:call-template name="tag_list">
                <xsl:with-param name="list_txt" select="$list_txt"/>
                <xsl:with-param name="sublist_txt"/>
              </xsl:call-template>
            </fo:list-block>
          </xsl:otherwise>
          
        </xsl:choose>
      </xsl:when>
      
      <xsl:otherwise>
        <!--call template to print list --> 
        <fo:list-block>
          <xsl:call-template name="tag_list">
            <xsl:with-param name="list_txt" select="$list_txt"/>
            <xsl:with-param name="sublist_txt"/>
          </xsl:call-template>
        </fo:list-block>
        
        <xsl:call-template name="tag_text">
          <xsl:with-param name="txt" select="$txt"/>
        </xsl:call-template>
        
      </xsl:otherwise>
    </xsl:choose>
    
  </xsl:template>
  
  
  <xsl:template name="tag_list">
    <xsl:param name="list_txt" />
    <xsl:param name="sublist_txt" />
    <xsl:choose>
      <!-- If the list contains multiple items, tag one, redfine variable, pass back through --> 
      <xsl:when test="string-length($list_txt)-string-length(translate($list_txt, $list_break, ''))>1">
        <xsl:choose>
          <xsl:when test="starts-with(normalize-space($list_txt), $list_label2)">
            <xsl:variable name="sublist_txt" select="concat($sublist_txt, substring-before($list_txt, $list_break), $list_break)"/>
            <xsl:variable name="list_txt" select="substring-after($list_txt, $list_break)"/>
            
            <xsl:call-template name="tag_list">
              <xsl:with-param name="list_txt" select="$list_txt"/>
              <xsl:with-param name="sublist_txt" select="$sublist_txt"/>
            </xsl:call-template>
            
          </xsl:when>               
          <xsl:otherwise>
            <xsl:if test="string-length($sublist_txt)>1">
              <fo:list-item><fo:list-item-label><fo:block></fo:block></fo:list-item-label><fo:list-item-body>
                  <fo:list-block>
                    <xsl:call-template name="tag_sublist">
                      <xsl:with-param name="sublist_txt" select="$sublist_txt"/>
                    </xsl:call-template>
                  </fo:list-block>                 
                </fo:list-item-body></fo:list-item>
            </xsl:if>
            
            <fo:list-item>
              <fo:list-item-label><fo:block start-indent="10pt">•</fo:block></fo:list-item-label>
              <fo:list-item-body><fo:block start-indent="20pt"><xsl:value-of select="substring-after(substring-before($list_txt, $list_break), $list_label)"/></fo:block></fo:list-item-body>
            </fo:list-item>
            <xsl:variable name="list_txt" select="substring-after($list_txt, $list_break)"/>
            
            <xsl:call-template name="tag_list">
              <xsl:with-param name="list_txt" select="$list_txt"/>
              <xsl:with-param name="sublist_txt" select="''"/>
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
        
      </xsl:when>
      <!-- Tag last list item --> 
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="starts-with(normalize-space($list_txt), $list_label2)">
            <xsl:variable name="sublist_txt" select="concat($sublist_txt, $list_txt)"/>
            <fo:list-item><fo:list-item-label><fo:block></fo:block></fo:list-item-label><fo:list-item-body>
                <fo:list-block>
                  <xsl:call-template name="tag_sublist">
                    <xsl:with-param name="sublist_txt" select="$sublist_txt"/>
                  </xsl:call-template>
                </fo:list-block>
              </fo:list-item-body></fo:list-item>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="string-length($sublist_txt)>1">
              <fo:list-item><fo:list-item-label><fo:block></fo:block></fo:list-item-label><fo:list-item-body>
                  <fo:list-block>
                    <xsl:call-template name="tag_sublist">
                      <xsl:with-param name="sublist_txt" select="$sublist_txt"/>
                    </xsl:call-template>
                  </fo:list-block>
                </fo:list-item-body></fo:list-item>
            </xsl:if>
            
            <fo:list-item>
              <fo:list-item-label><fo:block start-indent = "10pt">•</fo:block></fo:list-item-label>
              <fo:list-item-body><fo:block start-indent="20pt"><xsl:value-of select="substring-before(substring-after($list_txt, $list_label), $list_break)"/></fo:block></fo:list-item-body>
            </fo:list-item>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="tag_sublist">
    <xsl:param name="sublist_txt"/>
    <xsl:choose>
      <!-- If the list contains multiple items, tag one, redfine variable, pass back through --> 
      <xsl:when test="string-length($sublist_txt)-string-length(translate($sublist_txt, $list_break, ''))>1">
        <fo:list-item start-indent="20pt">
          <fo:list-item-label><fo:block start-indent="30pt">•</fo:block></fo:list-item-label>
          <fo:list-item-body><fo:block start-indent="40pt"><xsl:value-of select="substring-after(substring-before($sublist_txt, $list_break), $list_label)"/></fo:block></fo:list-item-body>
        </fo:list-item>
        <xsl:variable name="sublist_txt" select="substring-after($sublist_txt, $list_break)"/>
        
        <xsl:call-template name="tag_sublist">
          <xsl:with-param name="sublist_txt" select="$sublist_txt"/>
        </xsl:call-template>
        
      </xsl:when>
      <!-- Tag last list item --> 
      <xsl:otherwise>
        <xsl:if test="starts-with(normalize-space($sublist_txt), $list_label2)">
          <fo:list-item start-indent="20pt">
            <fo:list-item-label><fo:block start-indent="30pt">•</fo:block></fo:list-item-label>
            <fo:list-item-body><fo:block start-indent="40pt"><xsl:value-of select="substring-before(substring-after($sublist_txt, $list_label), $list_break)"/></fo:block></fo:list-item-body>
          </fo:list-item>
        </xsl:if>
      </xsl:otherwise>
    </xsl:choose>
    
  </xsl:template>
  
  
</xsl:stylesheet>